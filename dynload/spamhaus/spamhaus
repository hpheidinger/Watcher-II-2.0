#!/bin/bash
if [[ "$1" == 'debug'	]]; then set -x;	_DEBUG=$1; shift; fi
if [[ "$1" == 'debug2'	]]; then set -xvT;	_DEBUG=$1; shift; fi
if [[ "$1" == 'trace'	]]; then 		_TRACE=$1; shift; fi
####################################################################
PROC_START=`date +%s%N`
# - spamhaus -	JSON rendition
# ----------- NFT ------------
#
# Plug Spamhaus DROP lists dynamically into firewall ...
#-------------------------
REALPATH=`realpath $0`
WHERE=`dirname $REALPATH`
ME=`basename $REALPATH`
cd $WHERE
. ../../system.conf
. ../../watchermap.conf
. ../../common.conf
. ../../common.bashlib
. ../../api/bash/nft.bashlib
#-------------------------
. $ME.conf

chmod 700 $ME
chmod 600 $ME.conf

CHANGED=0
SPAMHAUS_FILE="drop_v4.json"	# Recommended since end of 2024
TXTFILE="drop.txt"
LOADFILE=$POOL/nftset.Loadfile-$ME

trap cleanup 0 1 2 9 15

cleanup() {
local funtag="[${FUNCNAME[0]}]"

	# Cleanup from RAMdisk use ...
	if [ -f $POOL/$SPAMHAUS_FILE 	]; then mv $POOL/$SPAMHAUS_FILE .; fi
	if [ -f $POOL/drop.txt		]; then mv $POOL/drop.txt	.; fi
	chmod 600 $SPAMHAUS_FILE drop.txt

	# Load what we have
	SH2FW $TXTFILE "$LOADFILE"
	load_nftset $MYSET "$SETOPTS" "$LOADFILE"
	# nft_mkset $MYSET "$SETTYP" "$SETOPTS"

	PROC_END=`date +%s%N`
	PROC_TIME=`echo "scale=3; ($PROC_END - $PROC_START)/10^6" | bc`
	logger "$ME[$$]: Finished: $PROC_TIME ms"
	printf  " Â» %-15s ... finished in %8.2f ms\n" $ME $PROC_TIME

	if [ -n "$WANT_ASN" ]
	then nohup ./spamhaus-asn >/dev/null 2>&1 &
	fi	
}

#
# Fetch a SpamHaus DROP file if not present
#
fetch_drop() {
# $1	The download file
local funtag="[${FUNCNAME[0]}]"
	(cd $POOL; wget -N -q "$HTTPADR/$1")
	return $?
}

load_nftset() {
local funtag="[${FUNCNAME[0]}]"
local	exist

#	# False (1) if not found ...
#	if ! $IPSET -n list $MYSET >/dev/null 2>&1
#	then mk-nftset $MYSET "$SETTYP" "$SETOPTS" >/dev/null 2>&1
#	fi
#
#	$IPSET -file $3 restore

	exist=`nft_sets | grep -c $MYSET`

	# Mimic	'-exist' from 'ipset'
	if [ $exist -lt 1 ]
	then nft_mkset $MYSET "$SETTYP" "$SETOPTS"
	fi

	nft_flush_set $MYSET >/dev/null 2>&1
	nft -f $LOADFILE
	logger "$ME[$$] SET $MYSET loaded from loadfile $LOADFILE"
}

#
# Read spamhaus drop file in text format and output 
# an nftset loadfile
#
SH2FW() {
# $1	drop file in text format
# $2	loadfile 
local funtag="[${FUNCNAME[0]}]"
local	loadfile=$2			\
local	exist

	exist=$(nft_sets | grep -c $MYSET)
	> $loadfile
	awk	-v loadfile=$loadfile		\
		-v setname=$MYSET		\
		-v settyp="$SETTYP"		\
		-v setopts="$SETOPTS" 		\
		-v exist=$$exist		\
		-v basetable="$NFT_BASE_TAB" '
	BEGIN		{ SUFFIX="comment \"spamhaus,drop\"" }
	/^[ \t]*;/	{ next }
			{
				split ($0,parts,";")
				IP=parts[1]
				arr[IP]=IP 
			}
	END	 {
		#	printf "-exist create %s %s %s\n", setname, settyp, setopts > loadfile
		if ( exist < 1 )
		printf "add set %s %s {type %s %s}\n", basetable, setname, settyp, setopts > loadfile

			for (addr in arr) {
			#	printf "add %s %s %s\n",setname,addr,SUFFIX >> loadfile
			printf "add element %s %s {%s %s}\n", basetable, setname, addr, SUFFIX >> loadfile
			}
	}
	' $1
}


get_update() {
local funtag="[${FUNCNAME[0]}]"
local	exp_date
local	exp_left

	#
	# See for the expiration date
	#
	spamhaus_date=`grep -E '^(; Expires:)' $2 | cut -f2 -d","`
	exp_date=`date +%s -d "$spamhaus_date"`
	exp_left=$(( ($exp_date - `date +%s`)/60 ))

	# Ignore if not expired when present
	if [ $exp_left -lt 0 ] 
	then 	: echo "$2 expired ... updating ..."
		logger "$ME[$$]: $2 expired ... updating ..."

		if [ -f $2 ]; then mv $2 $2-old; fi

		fetch_drop $1
		if [ $? -eq 0 ]
		then	((CHANGED++))
		else	# Reclaim old file and try again later
			logger "$ME[$$] Fetching '$1' failed ... old file reclaimed"
			mv $2-old $2
		fi
	else
		logger "$ME[$$]: $2 not due for update ..."
	fi
}

json2txt() {
local funtag="[${FUNCNAME[0]}]"
local	dropfile=$1
local	dropout=$2

	# Make a .txt file from .json input file on the RAMdisk
	(cd $POOL
	if [ -f $SPAMHAUS_FILE ]
	then	
		tail -1 $dropfile | jq -r '"; Spamhaus DROP List \(.timestamp | strftime("%Y/%m/%d")) - \(.copyright)\n; https://www.spamhaus.org/drop/drop_v4.json\n; Last-Modified: \(.timestamp | strftime("%a, %d %b %Y %H:%M:%S UTC"))\n; Expires: \(.timestamp+93600 | strftime("%a, %C %b %Y %H:%M:%S UTC"))"' > $dropout

		jq -r 'select(.type == null) | (.cidr) + " ; " + (.sblid)' $dropfile >> $dropout
		echo "; EOF" >> $dropout
		return 0
	else	return 1
	fi
	) #subshell end
}

#----------------- Main -----------------------
dump_runtime

logger "$ME[$$]: Starting ..."

# If the file does not exist just get it
if [ ! -f $SPAMHAUS_FILE ]
then fetch_drop $SPAMHAUS_FILE
else get_update $SPAMHAUS_FILE drop.txt
fi

json2txt $SPAMHAUS_FILE drop.txt

